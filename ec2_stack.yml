- name: setup vprofile stack
  hosts: localhost
  connection: local

  tasks:
   - name: export variable1
     include_vars: /VPCproject/stack_variables
   - name: export variable2
     include_vars: /VPCproject/vpc_project_variables
   - name: export VPC out varibles
     include_vars: /VPCproject/vpc_out_variables

   - name: create key pair
     ec2_key:
      name: sample-key2
      region: "{{ region }}"
      state: present
     register: key_out

   - name: store key in local machine
     copy:
      content: "{{ key_out.key.private_key }}"
      dest: /opt/key
      mode: 0600
     when: key_out.changed

   - name: create security group for ELB
     ec2_group:
      description: allow traffic from port 22 and internet
      state: present
      region: "{{ region }}"
      name: ELB
      purge_rules: no
      rules:
       - proto: tcp
         from_port: 80
         to_port: 80
         cidr_ip: 0.0.0.0/0
      vpc_id: "{{ vpc_id }}"
     register: elbsg_out

   - name: create security group for ec2
     ec2_group:
      description: allow traffic from ELB
      name: ec2 instances SG
      region: "{{ region }}"
      vpc_id: "{{ vpc_id }}"
      purge_rules: no
      state: present
      rules:
       - proto: tcp
         from_port: 22
         to_port: 22
         group_name: bastion_group

       - proto: tcp
         from_port: 80
         to_port: 80
         group_name: ELB
     register: ec2sg_out
   
   - name: update security group with its own sg id
     ec2_group:
      name: vprostack-sg
      description: allow all traffic
      region: "{{ region }}"
      vpc_id: "{{ vpc_id }}"
      purge_rules: no
      rules:
       - proto: all
         group_id: "{{ec2sg_out.group_id}}"

   - name: creating nginx webserver
     ec2:
      key_name: sample-key2
      region: "{{ region }}"
      #state: present
      image: "{{ nginx_ami }}"
      instance_type: t4g.small
      #name: nginx
      group_id: "{{ ec2sg_out.group_id }}"
      vpc_subnet_id: "{{ privsub1id }}"
      instance_tags:
       Name: "web01"
       project: vprofile
       owner: devops team
      exact_count: 1
      count_tag:
       Name: "web01"
       project: vprofile
       owner: devops team
     register: nginx_out
   - debug:
      var: nginx_out

   - name: creating tomcat appserver
     ec2:
      #name: tomacat
      key_name: sample-key2
      region: "{{ region }}"
      #state: present
      image: "{{ tomcat_ami }}"
      instance_type: t4g.small
      group_id: "{{ ec2sg_out.group_id }}"
      vpc_subnet_id: "{{ privsub1id }}"
      instance_tags:
       Name: "app01"
       project: vprofile
       owner: devops team
      exact_count: 1
      count_tag:
       Name: "app01"
       project: vprofile
       owner: devops team
     register: tomcat_out

   - name: creating memcache mc01
     ec2:
      #name: memcache
      key_name: sample-key2
      region: "{{ region }}"
      #tate: present
      image: "{{ memcached_ami }}"
      instance_type: t4g.small
      group_id: "{{ ec2sg_out.group_id }}"
      vpc_subnet_id: "{{ privsub1id }}"
      instance_tags:
       Name: "mc01"
       project: vprofile
       owner: devops team
      exact_count: 1
      count_tag:
       Name: "mc01"
       project: vprofile
       owner: devops team
     register: mamcached_out

   - name: creating rabbitmq rm01
     ec2:
      #name: rabbitmq
      key_name: sample-key2
      region: "{{ region }}"
      #state: present
      image: "{{ rabbitmq_ami }}"
      instance_type: t4g.small
      group_id: "{{ ec2sg_out.group_id }}"
      vpc_subnet_id: "{{ privsub1id }}"
      instance_tags:
       Name: "rm01"
       project: vprofile
       owner: devops team
      exact_count: 1
      count_tag:
       Name: "rm01"
       project: vprofile
       owner: devops team
     register: rabbitmq_out

   - name: creating mysql server db01
     ec2:
      #name: mysql
      key_name: sample-key2
      region: "{{ region }}"
      #state: present
      image: "{{ mysql_ami }}"
      instance_type: t4g.small
      group_id: "{{ ec2sg_out.group_id }}"
      vpc_subnet_id: "{{ privsub1id }}"
      instance_tags:
       Name: "db01"
       project: vprofile
       owner: devops team
      exact_count: 1
      count_tag:
       Name: "db01"
       project: vprofile
       owner: devops team
     register: mysql_out

   - local_action:
      name: eb
      region: "{{ region }}"
      state: present
      instance_ids:
       - "{{ nginx_out.tagged_instances[0].id }}"
      purge_instance_ids: true
      security_group_ids: "{{ elbsg_out.group_id }}"
      subnets:
       - "{{ pubsub1id }}"
       - "{{ pubsub2id }}"
       - "{{ pubsub3id }}"
      listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 80

   - name: insert all ip adresses
     blockinfile:
      path: /IP
      block:
       web01_ip: "{{ nginx_out.tagged_instances[0].private_ip }}"
       app01_ip: "{{ tomcat_out.tagged_instances[0].private_ip }}"
       rmq01_ip: "{{ rabbitmq_out.tagged_instances[0].private_ip }}"
       mc01_ip: "{{ memcached_out.tagged_instances[0].private_ip }}"
       db01_ip: "{{ mysql_out.tagged_instances[0].private_ip }}"

   - name: copy login key to provision_stack directory
      copy:
        src: /opt/key
        dest: /VPCproject/key
        mode: '0400'

    - name: Insert/Update Inventory file provision-stack/inventory-vpro
      blockinfile:
        path: /opt/inventory
        block: |
          web01 ansible_host={{ nginx_out.tagged_instances[0].private_ip }}
          app01 ansible_host={{ tomcat_out.tagged_instances[0].private_ip }}
          rmq01 ansible_host={{ rabbitmq_out.tagged_instances[0].private_ip }}
          mc01 ansible_host={{ memcached_out.tagged_instances[0].private_ip }}
          db01 ansible_host={{ mysql_out.tagged_instances[0].private_ip }}
          cntl ansible_host=172.20.1.97 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=key
          #ansible_python_interpreter=/usr/bin/python3
          helooooo
